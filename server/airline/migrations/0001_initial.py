# Generated by Django 2.2.4 on 2019-08-20 11:59

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Aircraft',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50)),
                ('budget_places', models.IntegerField(default=0)),
                ('vip_places', models.IntegerField(default=0)),
            ],
            options={
                'verbose_name_plural': 'Aircraft',
                'ordering': ['title'],
                'verbose_name': 'Aircraft',
            },
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=250)),
            ],
            options={
                'verbose_name_plural': 'Cities',
                'ordering': ['title'],
                'verbose_name': 'City',
            },
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=250)),
            ],
            options={
                'verbose_name_plural': 'Countries',
                'ordering': ['title'],
                'verbose_name': 'Country',
            },
        ),
        migrations.CreateModel(
            name='Flight',
            fields=[
                ('code', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('departure_date', models.DateTimeField()),
                ('arrival_date', models.DateTimeField()),
                ('state', models.IntegerField(choices=[(0, 'Waiting'), (1, 'Processing'), (2, 'Finished')], default=0)),
                ('aircraft', models.ManyToManyField(blank=True, default=[], to='airline.Aircraft')),
                ('arrival_point', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, related_name='arv_flight', to='airline.City')),
                ('departure_point', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, related_name='dep_flight', to='airline.City')),
            ],
            options={
                'verbose_name_plural': 'Flights',
                'ordering': ['departure_date', 'code'],
                'verbose_name': 'Flight',
            },
        ),
        migrations.CreateModel(
            name='Passport',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('surname', models.CharField(max_length=150)),
                ('Patronymic', models.CharField(blank=True, default='', max_length=150)),
                ('gender', models.IntegerField(choices=[(0, 'Male'), (1, 'Female')], default=0)),
                ('passport_series', models.IntegerField()),
                ('passport_number', models.IntegerField()),
            ],
            options={
                'verbose_name_plural': 'Passports',
                'verbose_name': 'Passport',
            },
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('code', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('place', models.IntegerField(default=0)),
                ('price', models.FloatField(default=0.0)),
                ('is_vip', models.BooleanField(default=False)),
                ('flight', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='airline.Flight')),
                ('passenger', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='airline.Passport')),
            ],
            options={
                'verbose_name_plural': 'Tickets',
                'verbose_name': 'Ticket',
            },
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=250)),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='region', to='airline.Country')),
            ],
            options={
                'verbose_name_plural': 'Regions',
                'ordering': ['title'],
                'verbose_name': 'Region',
            },
        ),
        migrations.AddField(
            model_name='city',
            name='region',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='city', to='airline.Region'),
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('passport', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user', to='airline.Passport')),
                ('ticket', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user', to='airline.Ticket')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name_plural': 'Users',
                'verbose_name': 'User',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
